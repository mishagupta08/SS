ALTER TRIGGER Inv_Generate_PIStock    
ON M_InwardDetail -- 
With Encryption --- Lst Alteration: 10Feb2020@12:47PM,Friday (Added ItemCode)  
AFTER INSERT  
As    
    
 BEGIN 
  BEGIN TRANSACTION 
   BEGIN TRY


DECLARE @InwardNo as varchar(50)
DECLARE @FSessId as INT
DECLARE @ActiveStatus as Char(1)
DECLARE @InwardFor as varchar(50)
DECLARE @InwardForGroupId as Numeric(18,0)

SELECT @InwardNo=InwardNo,@FSessId=FSessId,@ActiveStatus=ActiveStatus,@InwardFor=InwardFor FROM INSERTED
-- Get Inward For Party Group ID ----
SELECT @InwardForGroupId=GroupID From M_LedgerMaster Where PartyCode=@InwardFor
--- DELETE IF Already Exists ---
IF Exists(SELECT * FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y')
  BEGIN
   DELETE FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y'
  END
   
Insert Into Im_CurrentStock(FSessId,SupplierCode,StockDate,RefNo,FCode,GroupId,ProdId,BatchCode,Barcode,Qty,SType,BType,Remarks,ActiveStatus,EntryBy,StockFor,RecTimeStamp,UserId,Version,BillType,ProdType,ItemCode)    
--Less Entry    
Select FSessId,InwardFor,InwardDate,InwardNo,SupplierCode,ISNULL(@InwardForGroupId,'0'),ProdCode,BatchNo,Barcode,'-'+ Cast(Qty as Varchar) as Qty,'O' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType,'P',ItemCode From Inserted
    
Union ALL    
--Add Entry    
Select FSessId,SupplierCode,InwardDate,InwardNo,InwardFor,ISNULL(@InwardForGroupId,'0'),ProdCode,BatchNo,Barcode,Qty ,'I' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType,'P',ItemCode From Inserted
 
     COMMIT TRANSACTION 
  END TRY
  
  
BEGIN CATCH
ROLLBACK TRANSACTION 

DECLARE @errmsg NVARCHAR(4000)
DECLARE @errseverity INT
DECLARE @errstate INT

SELECT @errmsg = ERROR_MESSAGE(), @errseverity = ERROR_SEVERITY(), @errstate = ERROR_STATE()
RAISERROR(@errmsg, @errseverity, @errstate)

END CATCH
END
GO
--------------------------------------------------
ALTER TRIGGER Inv_Generate_PIStock    
ON M_InwardDetail -- 06Jan16
With Encryption --- Lst Alteration: 03Jan14@12:47PM,Friday (Add New Clm BillType)  
AFTER INSERT  
As    
    
 BEGIN 
  BEGIN TRANSACTION 
   BEGIN TRY


DECLARE @InwardNo as varchar(50)
DECLARE @FSessId as INT
DECLARE @ActiveStatus as Char(1)
DECLARE @InwardFor as varchar(50)
DECLARE @InwardForGroupId as Numeric(18,0)

SELECT @InwardNo=InwardNo,@FSessId=FSessId,@ActiveStatus=ActiveStatus,@InwardFor=InwardFor FROM INSERTED
-- Get Inward For Party Group ID ----
SELECT @InwardForGroupId=GroupID From M_LedgerMaster Where PartyCode=@InwardFor
--- DELETE IF Already Exists ---
IF Exists(SELECT * FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y')
  BEGIN
   DELETE FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y'
  END
   
Insert Into Im_CurrentStock(FSessId,SupplierCode,StockDate,RefNo,FCode,GroupId,ProdId,BatchCode,Barcode,Qty,SType,BType,Remarks,ActiveStatus,EntryBy,StockFor,RecTimeStamp,UserId,Version,BillType)    
--Less Entry    
Select FSessId,InwardFor,InwardDate,InwardNo,SupplierCode,ISNULL(@InwardForGroupId,'0'),ProdCode,BatchNo,Barcode,'-'+ Cast(Qty as Varchar) as Qty,'O' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType From Inserted
    
Union ALL    
--Add Entry    
Select FSessId,SupplierCode,InwardDate,InwardNo,InwardFor,ISNULL(@InwardForGroupId,'0'),ProdCode,BatchNo,Barcode,Qty ,'I' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType From Inserted
 
     COMMIT TRANSACTION 
  END TRY
  
  
BEGIN CATCH
ROLLBACK TRANSACTION 

DECLARE @errmsg NVARCHAR(4000)
DECLARE @errseverity INT
DECLARE @errstate INT

SELECT @errmsg = ERROR_MESSAGE(), @errseverity = ERROR_SEVERITY(), @errstate = ERROR_STATE()
RAISERROR(@errmsg, @errseverity, @errstate)

END CATCH
END
GO
-----------------------
ALTER TRIGGER Inv_Generate_PIStock    
ON M_InwardDetail -- Create On Dated: 22Sep13,Sunday..17Jan13 (Dpesh)
With Encryption --- Lst Alteration: 03Jan14@12:47PM,Friday (Add New Clm BillType)  
AFTER INSERT  
As    
    
 BEGIN 
  BEGIN TRANSACTION 
   BEGIN TRY


DECLARE @InwardNo as varchar(50)
DECLARE @FSessId as INT
DECLARE @ActiveStatus as Char(1)
DECLARE @InwardFor as varchar(50)
DECLARE @InwardForGroupId as Numeric(18,0)

SELECT @InwardNo=InwardNo,@FSessId=FSessId,@ActiveStatus=ActiveStatus,@InwardFor=InwardFor FROM INSERTED
-- Get Inward For Party Group ID ----
SELECT @InwardForGroupId=GroupID From M_LedgerMaster Where PartyCode=@InwardFor
--- DELETE IF Already Exists ---
IF Exists(SELECT * FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y')
  BEGIN
   DELETE FROM Im_CurrentStock WHERE RefNo=@InwardNo And FSessId=@FSessId And ActiveStatus='Y'
  END
   
Insert Into Im_CurrentStock(FSessId,SupplierCode,StockDate,RefNo,FCode,GroupId,ProdId,BatchCode,Barcode,Qty,SType,BType,Remarks,ActiveStatus,EntryBy,StockFor,RecTimeStamp,UserId,Version,BillType)    
--Less Entry    
Select FSessId,InwardFor,InwardDate,InwardNo,SupplierCode,@InwardForGroupId,ProdCode,BatchNo,Barcode,'-'+ Cast(Qty as Varchar) as Qty,'O' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType From Inserted
    
Union ALL    
--Add Entry    
Select FSessId,SupplierCode,InwardDate,InwardNo,InwardFor,@InwardForGroupId,ProdCode,BatchNo,Barcode,Qty ,'I' as SType,'PI' as BType,'PI' as Remarks,'Y' as ActiveStatus,InwardBy,'Gen.Thr.TRG.' as StockFor,GetDate()as RecTimeStamp,UserId,Version,'PI' as BillType From Inserted
 
     COMMIT TRANSACTION 
  END TRY
  
  
BEGIN CATCH
ROLLBACK TRANSACTION 

DECLARE @errmsg NVARCHAR(4000)
DECLARE @errseverity INT
DECLARE @errstate INT

SELECT @errmsg = ERROR_MESSAGE(), @errseverity = ERROR_SEVERITY(), @errstate = ERROR_STATE()
RAISERROR(@errmsg, @errseverity, @errstate)

END CATCH
END